from fastapi import FastAPI, Depends, HTTPException, UploadFile, File, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session, joinedload
from typing import List
import models, schemas, database
from fastapi.middleware.cors import CORSMiddleware
import os
import aiohttp
from dotenv import load_dotenv
import datetime
import stripe
import traceback
import asyncio
from contextlib import asynccontextmanager
from sqlalchemy import text
from pydantic import BaseModel
from aiogram import Bot, Dispatcher
from aiogram.types import Message, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, Update
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(override=True)
bot_token = os.getenv("API_TOKEN")  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
admin_bot_token = os.getenv("ADMIN_BOT")  # –¢–æ–∫–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É
admin_chat_id = os.getenv("ADMIN_CHAT_ID")
stripe_secret_key = os.getenv("STRIPE_SECRET_KEY")
webhook_url = os.getenv("WEBHOOK_URL")  # URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, https://your-domain.com/webhook

if not all([bot_token, admin_bot_token, admin_chat_id, stripe_secret_key, webhook_url]):
    raise ValueError("Missing required environment variables")

stripe.api_key = stripe_secret_key

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=bot_token,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def update_db_structure(db: Session = database.SessionLocal()):
    try:
        result = db.execute(text("PRAGMA table_info(orders)"))
        columns = [row[1] for row in result]
        if 'payment_date' not in columns:
            print("–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü payment_date –≤ —Ç–∞–±–ª–∏—Ü—É orders")
            db.execute(text("ALTER TABLE orders ADD COLUMN payment_date TIMESTAMP"))
            db.commit()
            print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print("–°—Ç–æ–ª–±–µ—Ü payment_date —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã: {str(e)}")
        db.rollback()
    finally:
        db.close()

update_db_structure()

# Lifespan –¥–ª—è FastAPI
@asynccontextmanager
async def lifespan(app: FastAPI):
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"https://api.telegram.org/bot{bot_token}/setWebhook",
            json={"url": webhook_url}
        ) as response:
            resp_data = await response.json()
            if not resp_data.get("ok"):
                raise ValueError(f"Failed to set webhook: {resp_data}")
            print("Webhook set successfully")
    yield
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"https://api.telegram.org/bot{bot_token}/deleteWebhook"
        ) as response:
            print("Webhook deleted")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(lifespan=lifespan)
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://web.telegram.org", "https://telegram-app-1up1.onrender.com", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

models.Base.metadata.create_all(bind=database.engine)

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è Telegram
@dp.message(Command("start"))
async def cmd_start(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
                    web_app=WebAppInfo(url="https://telegram-app-1up1.onrender.com")
                )
            ]
        ]
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=kb)

# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤—ã—à–µ)
async def send_order_notification(order: models.Order, db: Session):
    try:
        items = db.query(models.OrderItem).filter(models.OrderItem.order_id == order.id).all()
        items_text = "\n".join([f"‚Ä¢ {item.product.name} - {item.quantity} √ó {item.price} ‚ÇΩ" for item in items])
        message = (
            "<b>üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
            f"<b>üìÖ –î–∞—Ç–∞:</b> {order.order_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>üÜî –ù–æ–º–µ—Ä:</b> #{order.id}\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {order.user_id}\n"
            f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{order.phone}</code>\n"
            f"<b>üè† –ê–¥—Ä–µ—Å:</b> {order.address}\n"
            f"<b>üöö –î–æ—Å—Ç–∞–≤–∫–∞:</b> {order.delivery_method}\n"
            f"<b>üí≥ –û–ø–ª–∞—Ç–∞:</b> {order.payment_method}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\n"
            f"<b>üí∞ –ò—Ç–æ–≥–æ:</b> {order.total} ‚ÇΩ\n"
            f"<b>üìå –°—Ç–∞—Ç—É—Å:</b> {order.status}"
        )
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
        telegram_url = f"https://api.telegram.org/bot{admin_bot_token}/sendMessage"
        async with aiohttp.ClientSession() as session:
            async with session.post(telegram_url, json={
                "chat_id": admin_chat_id,
                "text": message,
                "parse_mode": "HTML"
            }) as response:
                response_data = await response.json()
                print(f"–û—Ç–≤–µ—Ç Telegram API: {response_data}")
                if response.status != 200:
                    raise Exception(f"Failed to send notification: {response_data}")
        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ Telegram
@app.post("/webhook")
async def handle_webhook(request: Request):
    try:
        update = await request.json()
        telegram_update = Update(**update)
        await dp.feed_update(bot=bot, update=telegram_update)
        return {"ok": True}
    except Exception as e:
        print(f"Webhook error: {str(e)}")
        return {"ok": False, "error_code": 500, "description": str(e)}

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/", response_class=HTMLResponse)
async def read_root():
    with open("templates/index.html", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@app.get("/products/", response_model=List[schemas.Product])
async def get_products(db: Session = Depends(get_db)):
    return db.query(models.Product).all()

@app.post("/products/")
async def create_product(product: schemas.ProductCreate, db: Session = Depends(get_db)):
    db_product = models.Product(**product.model_dump())
    db.add(db_product)
    db.commit()
    db.refresh(db_product)
    return db_product

@app.delete("/products/{product_id}")
async def delete_product(product_id: int, db: Session = Depends(get_db)):
    db_product = db.query(models.Product).filter(models.Product.id == product_id).first()
    if not db_product:
        raise HTTPException(status_code=404, detail="Product not found")
    db.delete(db_product)
    db.commit()
    return {"message": "Product deleted successfully"}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
@app.post("/cart/", response_model=schemas.CartItem)
async def add_to_cart(cart_item: schemas.CartItemCreate, db: Session = Depends(get_db)):
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É: {cart_item.model_dump()}")
    product = db.query(models.Product).filter(models.Product.id == cart_item.product_id).first()
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    
    existing_item = db.query(models.CartItem).filter(
        models.CartItem.user_id == cart_item.user_id,
        models.CartItem.product_id == cart_item.product_id
    ).first()
    
    if existing_item:
        existing_item.quantity += cart_item.quantity
        db.commit()
        db.refresh(existing_item)
        return existing_item
    
    db_cart_item = models.CartItem(**cart_item.model_dump())
    db.add(db_cart_item)
    db.commit()
    db.refresh(db_cart_item)
    return db_cart_item

@app.get("/cart/{user_id}", response_model=List[schemas.CartItem])
async def get_cart(user_id: str, db: Session = Depends(get_db)):
    print(f"–ó–∞–ø—Ä–æ—Å –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è user_id: {user_id}")
    try:
        cart_items = db.query(models.CartItem).filter(models.CartItem.user_id == user_id).all()
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(cart_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ")
        return cart_items
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@app.put("/cart/{cart_item_id}", response_model=schemas.CartItem)
async def update_cart_item(cart_item_id: int, update_data: schemas.CartItemUpdate, db: Session = Depends(get_db)):
    db_cart_item = db.query(models.CartItem).filter(models.CartItem.id == cart_item_id).first()
    if not db_cart_item:
        raise HTTPException(status_code=404, detail="Cart item not found")
    
    if update_data.quantity <= 0:
        db.delete(db_cart_item)
    else:
        db_cart_item.quantity = update_data.quantity
        db.commit()
        db.refresh(db_cart_item)
    
    db.commit()
    return db_cart_item

@app.delete("/cart/{user_id}")
async def clear_cart(user_id: str, db: Session = Depends(get_db)):
    deleted_count = db.query(models.CartItem).filter(models.CartItem.user_id == user_id).delete()
    db.commit()
    if deleted_count == 0:
        raise HTTPException(status_code=404, detail="Cart is already empty")
    return {"message": "Cart cleared successfully"}

@app.delete("/cart/{cart_item_id}")
async def delete_cart_item(cart_item_id: int, db: Session = Depends(get_db)):
    db_cart_item = db.query(models.CartItem).filter(models.CartItem.id == cart_item_id).first()
    if not db_cart_item:
        raise HTTPException(status_code=404, detail="Cart item not found")
    
    db.delete(db_cart_item)
    db.commit()
    return {"message": "Cart item deleted successfully"}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@app.post("/checkout/{user_id}")
async def checkout(user_id: str, order_data: schemas.OrderCreate, db: Session = Depends(get_db)):
    try:
        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç user_id: {user_id}, –¥–∞–Ω–Ω—ã–µ: {order_data.model_dump()}")
        if order_data.user_id != user_id:
            raise HTTPException(status_code=400, detail="–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ User ID")
        if not order_data.phone or not order_data.address:
            raise HTTPException(status_code=400, detail="–¢–µ–ª–µ—Ñ–æ–Ω –∏ –∞–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        if not order_data.items:
            raise HTTPException(status_code=400, detail="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        for item in order_data.items:
            product = db.query(models.Product).filter(models.Product.id == item.product_id).first()
            if not product:
                raise HTTPException(status_code=404, detail=f"–¢–æ–≤–∞—Ä {item.product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        db_order = models.Order(
            user_id=user_id,
            total=order_data.total,
            phone=order_data.phone,
            address=order_data.address,
            delivery_method=order_data.delivery_method,
            payment_method=order_data.payment_method,
            status="–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã" if order_data.payment_method == "–ö–∞—Ä—Ç–∞" else "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            order_date=datetime.datetime.now()
        )
        db.add(db_order)
        db.commit()
        db.refresh(db_order)
        for item in order_data.items:
            db_item = models.OrderItem(
                order_id=db_order.id,
                product_id=item.product_id,
                quantity=item.quantity,
                price=item.price
            )
            db.add(db_item)
        db.commit()
        print(f"–ó–∞–∫–∞–∑ #{db_order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        await send_order_notification(db_order, db)
        if order_data.payment_method != "–ö–∞—Ä—Ç–∞":
            db.query(models.CartItem).filter(models.CartItem.user_id == user_id).delete()
            db.commit()
        return {
            "status": "success",
            "order_id": db_order.id,
            "total": order_data.total,
            "message": "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω",
            "payment_required": order_data.payment_method == "–ö–∞—Ä—Ç–∞"
        }
    except HTTPException as he:
        print(f"HTTP –æ—à–∏–±–∫–∞: {he.detail}")
        raise he
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@app.get("/products/filter/", response_model=List[schemas.Product])
async def filter_products(category: str = None, min_price: float = 0, max_price: float = float("inf"), query: str = None, db: Session = Depends(get_db)):
    db_query = db.query(models.Product)
    if category and category != "all":
        db_query = db_query.filter(models.Product.category == category)
    if query:
        db_query = db_query.filter(models.Product.name.ilike(f"%{query}%"))
    db_query = db_query.filter(models.Product.price >= min_price, models.Product.price <= max_price)
    return db_query.all()

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
@app.get("/check-admin/{user_id}")
async def check_admin(user_id: str, db: Session = Depends(get_db)):
    admin = db.query(models.Admin).filter(models.Admin.user_id == user_id).first()
    return {"is_admin": admin.is_admin if admin else False}

@app.post("/add-admin/{user_id}")
async def add_admin(user_id: str, db: Session = Depends(get_db)):
    admin = db.query(models.Admin).filter(models.Admin.user_id == user_id).first()
    if admin:
        if admin.is_admin:
            raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        admin.is_admin = True
    else:
        admin = models.Admin(user_id=user_id, is_admin=True)
        db.add(admin)
    db.commit()
    db.refresh(admin)
    return {"message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω", "is_admin": admin.is_admin}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@app.post("/upload-image")
async def upload_image(file: UploadFile = File(...)):
    upload_dir = "static/uploads"
    os.makedirs(upload_dir, exist_ok=True)
    file_path = os.path.join(upload_dir, file.filename)
    with open(file_path, "wb") as f:
        content = await file.read()
        f.write(content)
    return {"file_path": f"/static/uploads/{file.filename}"}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
@app.get("/orders/{user_id}", response_model=List[schemas.Order])
async def get_orders(user_id: str, db: Session = Depends(get_db)):
    print(f"–ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è user_id: {user_id}")
    orders = db.query(models.Order).options(joinedload(models.Order.items)).filter(models.Order.user_id == user_id).all()
    if not orders:
        print("–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []
    for order in orders:
        for item in order.items:
            product = db.query(models.Product).filter(models.Product.id == item.product_id).first()
            item.product_name = product.name if product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
        print(f"–ó–∞–∫–∞–∑ #{order.id} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(order.items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {[item.product_name for item in order.items]}")
    return orders

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã Stripe
@app.post("/orders/{order_id}/confirm")
async def confirm_order(order_id: int, body: dict):
    try:
        payment_intent_id = body.get("payment_intent_id")
        payment_intent = stripe.PaymentIntent.retrieve(payment_intent_id)
        if payment_intent.status == "succeeded":
            return {"status": "success", "message": f"–ó–∞–∫–∞–∑ #{order_id} –æ–ø–ª–∞—á–µ–Ω"}
        else:
            raise HTTPException(status_code=400, detail="–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
@app.post("/payment-success")
async def payment_success(payment_data: dict, db: Session = Depends(get_db)):
    try:
        print(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç /payment-success –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {payment_data}")
        if not all(k in payment_data for k in ["payment_intent", "user_id"]):
            print("–û—à–∏–±–∫–∞: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            raise HTTPException(400, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        payment_intent = stripe.PaymentIntent.retrieve(payment_data["payment_intent"])
        print(f"–°—Ç–∞—Ç—É—Å PaymentIntent {payment_data['payment_intent']}: {payment_intent.status}")
        if payment_intent.status != 'succeeded':
            print("–û—à–∏–±–∫–∞: –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –≤ Stripe")
            raise HTTPException(400, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –≤ Stripe")
        query = db.query(models.Order).filter(
            models.Order.user_id == payment_data["user_id"],
            models.Order.status == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            models.Order.payment_method == "–ö–∞—Ä—Ç–∞"
        )
        if "order_id" in payment_data:
            query = query.filter(models.Order.id == payment_data["order_id"])
        order = query.order_by(models.Order.order_date.desc()).first()
        if not order:
            print(f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id: {payment_data['user_id']}, order_id: {payment_data.get('order_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            raise HTTPException(404, "–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
        print(f"–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ #{order.id} –¥–ª—è user_id: {payment_data['user_id']}")
        order.status = "–û–ø–ª–∞—á–µ–Ω–æ"
        order.payment_date = datetime.datetime.now()
        db.commit()
        print(f"–ó–∞–∫–∞–∑ #{order.id} –æ–±–Ω–æ–≤–ª—ë–Ω: —Å—Ç–∞—Ç—É—Å = –û–ø–ª–∞—á–µ–Ω–æ, payment_date = {order.payment_date}")
        deleted_count = db.query(models.CartItem).filter(models.CartItem.user_id == payment_data["user_id"]).delete()
        db.commit()
        print(f"–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞, —É–¥–∞–ª–µ–Ω–æ {deleted_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        await send_payment_notification_with_retry(order, db)
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
        return {"status": "success", "order_id": order.id}
    except HTTPException as he:
        print(f"HTTP –æ—à–∏–±–∫–∞: {he.detail}")
        raise he
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {traceback.format_exc()}")
        raise HTTPException(500, f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
async def send_payment_notification_with_retry(order: models.Order, db: Session, max_retries: int = 3):
    for attempt in range(max_retries):
        try:
            db.refresh(order)
            items = db.query(models.OrderItem).join(models.Product).filter(models.OrderItem.order_id == order.id).all()
            items_text = "\n".join(f"‚Ä¢ {item.product.name} - {item.quantity} √ó {item.price} ‚ÇΩ" for item in items)
            message = (
                "üí≥ <b>–ü–õ–ê–¢–ï–ñ –ü–û–õ–£–ß–ï–ù</b>\n\n"
                f"üÜî –ù–æ–º–µ—Ä: #{order.id}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.user_id}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"üí∞ –°—É–º–º–∞: {order.total} ‚ÇΩ\n"
                f"‚è± –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {order.payment_date}\n\n"
                f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\n"
                f"üè† –ê–¥—Ä–µ—Å: {order.address}\n"
                f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_method}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: {order.status}"
            )
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"https://api.telegram.org/bot{admin_bot_token}/sendMessage",
                    json={
                        "chat_id": admin_chat_id,
                        "text": message,
                        "parse_mode": "HTML",
                        "disable_web_page_preview": True
                    },
                    timeout=10
                ) as resp:
                    response_data = await resp.json()
                    print(f"–û—Ç–≤–µ—Ç Telegram API (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {response_data}")
                    if resp.status == 200:
                        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return True
                    else:
                        print(f"–û—à–∏–±–∫–∞ Telegram API (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {response_data}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {str(e)}")
            if attempt == max_retries - 1:
                raise
    return False

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ Stripe
@app.post("/create-payment-intent/{user_id}")
async def create_payment_intent(user_id: str, db: Session = Depends(get_db)):
    print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ PaymentIntent –¥–ª—è user_id: {user_id}")
    try:
        cart_items = db.query(models.CartItem).filter(models.CartItem.user_id == user_id).all()
        if not cart_items:
            print("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            raise HTTPException(status_code=400, detail="Cart is empty")
        total = sum(item.product.price * item.quantity for item in cart_items) * 100
        print(f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ü–µ–Ω—Ç–æ–≤")
        intent = stripe.PaymentIntent.create(
            amount=int(total),
            currency="usd",
            payment_method_types=["card"],
            metadata={"user_id": user_id}
        )
        print(f"PaymentIntent —Å–æ–∑–¥–∞–Ω: {intent.id}")
        return JSONResponse({
            "client_secret": intent.client_secret,
            "payment_intent_id": intent.id
        })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PaymentIntent: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
@app.get("/debug/routes")
async def debug_routes():
    routes = [{"path": route.path, "methods": route.methods} for route in app.routes]
    return {"routes": routes}
